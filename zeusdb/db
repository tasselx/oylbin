#!/bin/bash 
REDIS_SERVER='redis-server'
TOKYOTYRANT_SERVER="ttserver"

# setting environment variables
LANG=C
LC_ALL=C
export LANG LC_ALL
export SCRIPTDIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd $SCRIPTDIR

# 检查数据库程序是否存在
if ! test -x "$REDIS_SERVER";then
    REDIS_SERVER_PATH=$(which $REDIS_SERVER)
    if ! test -x "$REDIS_SERVER_PATH";then
        echo "redis server binary[$REDIS_SERVER] not found"
        exit 1
    fi
    REDIS_SERVER=$REDIS_SERVER_PATH
fi

if ! test -x "$TOKYOTYRANT_SERVER";then
    TOKYOTYRANT_SERVER_PATH=$(which $TOKYOTYRANT_SERVER)
    if ! test -x "$TOKYOTYRANT_SERVER_PATH";then
        echo "redis server binary[$TOKYOTYRANT_SERVER] not found"
        exit 1
    fi
    TOKYOTYRANT_SERVER=$TOKYOTYRANT_SERVER_PATH
fi

function print_usage {
    cat <<EOF

USAGE:

    $0 create [tcb|tch|redis] <name> <port>
    $0 create [tcb|tch] <name> <port> <master_host> <master_port>

    $0 [start|stop|restart] <folder_name>

    TODO $0 clearulog <folder_name>

EOF
    exit 1
}

function db_create {
    if test $# -ne 3 && test $# -ne 5;then
        print_usage
    fi
    db_type=$1
    if test "$db_type" != "tcb" && test "$db_type" != "tch" && test "$db_type" != "redis";then
        echo "invalid db_type[$db_type]"
        print_usage
    fi
    db_name=$2
    db_port=$3
    folder_name=$db_name.$db_type.$db_port
    if test -d "$SCRIPTDIR/$folder_name" ;then
        echo "folder[$folder_name] already exists"
        print_usage
    fi
    mkdir $SCRIPTDIR/$folder_name
    case "$db_type" in
        tcb|tch)
            is_slave=0
            cp $SCRIPTDIR/common.tokyotyrant $SCRIPTDIR/$folder_name/config
            if test $# -eq 5;then
                is_slave=1
                master_host=$4
                master_port=$5
                cat >> $SCRIPTDIR/$folder_name/config <<EOF
                option_sid=2
                option_mhost=$master_host
                option_mport=$master_port
EOF
            fi
            if test "$db_type" = "tcb" && test "$is_slave" = "0" 
            then
                echo 'db_type_and_param=".tcb#lmemb=1024#nmemb=2048#bnum=2000000#opts=ld#rcnum=10000000#xmsiz=512M"' >>$SCRIPTDIR/$folder_name/config

            elif test "$db_type" = "tcb" && test "$is_slave" = "1" 
            then
                echo 'db_type_and_param=".tcb#lmemb=1024#nmemb=2048#bnum=2000000#opts=ld#rcnum=10000000#xmsiz=128M"' >>$SCRIPTDIR/$folder_name/config

            elif test "$db_type" = "tch" && test "$is_slave" = "0" 
            then
                echo 'db_type_and_param=".tch#bnum=20000000#rcnum=1000000#xmsiz=256M"' >>$SCRIPTDIR/$folder_name/config
                
            elif test "$db_type" = "tch"&& test "$is_slave" = "1" 
            then
                echo 'db_type_and_param=".tch#bnum=20000000#rcnum=1000000#xmsiz=64M"' >>$SCRIPTDIR/$folder_name/config
            fi
            ;;
        redis)
            cp $SCRIPTDIR/common.redis $SCRIPTDIR/$folder_name/redis.conf
            echo "port $db_port" >> $SCRIPTDIR/$folder_name/redis.conf
            ;;
    esac
}

function db_start_tokyotyrant {

    folder_name=$SCRIPTDIR/$folder_name

    source $folder_name/config

    echo "Starting the server of Tokyo Tyrant"

    cmd="$TOKYOTYRANT_SERVER -port $db_port"
    for key in host thnum tout ulim sid mhost mport ; do
        option_name="option_$key"
        if [ -n "${!option_name}" ]; then
            cmd="$cmd -$key ${!option_name}"
        fi
    done
    for key in pid log ulog rts ; do
        option_name="option_$key"
        if [ -n "${!option_name}" ]; then
            cmd="$cmd -$key $folder_name/${!option_name}"
            if [[ $key = "ulog" ]]; then
                mkdir -p $folder_name/${!option_name}
            fi
        fi
    done

    for key in dmn kl ld le uas rcc ;do
        option_name="option_$key"
        if [[ "${!option_name}" -eq 1 ]]; then
            cmd="$cmd -$key"
        fi
    done
    
    cmd="$cmd $folder_name/${db_name}${db_type_and_param}"
    printf "Executing: %s\n" "$cmd"
    $cmd
    if [ "$?" -eq 0 ] ; then
        printf 'Done\n'
        return 0
    else
        printf 'The server could not started\n'
        return 1
    fi

}

function db_start_redis {

    folder_name=$SCRIPTDIR/$folder_name
    cd $folder_name && $REDIS_SERVER $folder_name/redis.conf
    sleep 0.1
    if [[ -f "$folder_name/pid" ]];then
        echo "success start redis server with config $folder_name/redis.conf"
        pid=`cat $folder_name/pid`
        ps $pid
    else
        echo "failed to start redis server with config $folder_name/redis.conf"
        tail $folder_name/redis.log
    fi
}

function db_start {
    if test $# -ne 1 ;then
        print_usage
    fi

    folder_name=$(basename $1)

    if ! test -d "$folder_name";then
        echo "folder[$folder_name] not exists"
        print_usage
    fi

    db_name=`echo $folder_name | awk -F. '{print $1}'`
    db_type=`echo $folder_name | awk -F. '{print $2}'`
    db_port=`echo $folder_name | awk -F. '{print $3}'`

    if test -f "$folder_name/pid" ;then
        pid=`cat $folder_name/pid`
        num=`ps $pid | wc -l`
        if test $num -gt 1 ;then
            ps $pid
            echo "Server [$folder_name] is already running"
            return 1
        else
            rm $folder_name/pid
        fi
    fi

    if test -z "$db_port"  || test  -z "$db_name" || test -z "$db_type" ; then
        printf 'Invalid configuration\n'
        return 1
    fi

    export folder_name db_name db_type db_port

    if test "$db_type" = "tch" || test "$db_type" = "tcb";then
        db_start_tokyotyrant
    elif test "$db_type" = "redis";then
        db_start_redis
    fi

}

function stop {
    pidfile=$1
    printf 'Stopping the server \n'
    if [ -f "$pidfile" ] ; then
        pid=`cat "$pidfile"`
        num=`ps $pid | wc -l`
        if [[ $num -gt 1 ]];then
            printf "Sending the terminal signal to the process: %s\n" "$pid"
            kill -TERM "$pid"
            c=0
            while true ; do
                sleep 0.1
                if [ -f "$pidfile" ] ; then
                    c=`expr $c + 1`
                    if [ "$c" -ge 100 ] ; then
                        printf 'Hanging process: %d\n' "$pid"
                        return 1
                    fi
                else
                    printf 'Done\n'
                    return 0
                fi
            done
        else
            printf 'No process found\n'
            return 1
        fi
    else
        printf 'No process found\n'
        return 1
    fi
}

function db_stop {
    if test $# -ne 1 ;then
        print_usage
    fi

    folder_name=$(basename $1)

    if ! test -d "$folder_name";then
        echo "folder[$folder_name] not exists"
        print_usage
    fi

    stop $folder_name/pid
}

case "$1" in
    create)
        if test $# -eq 4 || test $# -eq 6;then
            shift 1
            db_create $*
        else
            print_usage
        fi
        ;;
    start)
        shift 1
        db_start $*
        ;;
    stop)
        shift 1
        db_stop $*
        ;;
    restart)
        shift 1
        db_stop $*
        db_start $*
        ;;
    *)
        print_usage
        ;;
esac
